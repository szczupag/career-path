package com.drools.example

import com.drools.example.Career.Question;
import com.drools.example.Career.Answer;
import com.drools.example.Career.Solution
import javax.swing.*
import java.awt.GridLayout
import java.util.ArrayList
import java.awt.event.ItemListener
import java.awt.event.ItemEvent
import java.util.Arrays;
import org.kie.api.runtime.KieRuntime

global JFrame frame

//STOP
rule "Solution"
    when
        Solution();
    then
        System.out.println("STOP");
end

//INITIAL QUESTION
rule "Q1"
	when
	then
	    Question question1 = new Question("Do you want a responsible job", 1);
	    question1 = getAnswer(frame, question1, false, kcontext.getKieRuntime());

	    insert(question1);
		System.out.println(question1.questionText);
end

//Q1-YES
rule "Q2"
    when
        q: Question(index==1, answer==Answer.YES);
    then
        Question question2 = new Question("Marks higher than 60%", 2);
		System.out.println(question2.questionText);
end

//Q1-NO
rule "Q1-sol"
    when
     q: Question(index==1, answer==Answer.NO);
    then
        Solution solution = new Solution("Become a hippie");
		System.out.println(solution.solutionText);
end

//Q2-YES
rule "Q3"
    when
        q: Question(index==2, answer==Answer.YES);
    then
        Question question3 = new Question("Willing to study hard", 3);
        retract(q);
        insert(question3);
        System.out.println(question3.questionText);
end

//Q2-NO or Q8-NO or Q5-NO
rule "Q4"
    when
        q: Question((index==2 && answer==Answer.NO)
        || (index==8 && answer==Answer.NO)
        || (index==5 && answer==Answer.NO));
    then
        Question question4 = new Question("Want further schooling", 4);
        retract(q);
        insert(question4);
        System.out.println(question4.questionText);
end

//Q3-MAYBE
rule "Q3-sol"
    when
        q: Question(index==3, answer==Answer.MAYBE);
    then
        Solution solution = new Solution("Go to work for a year");
        retract(q);
        insert(solution);
        System.out.println(solution.solutionText);
end

//Q3-NO or Q8-YES
rule "Q5"
    when
        q: Question((index==3 && answer==Answer.NO)||(index==8 && answer==Answer.YES));
    then
        Question question5 = new Question("Will it last", 5);
        retract(q);
        insert(question5);
        System.out.println(question5.questionText);
end

//Q3-YES
rule "Q6"
    when
        q: Question(index==3, answer==Answer.MAYBE);
    then
        Question question6 = new Question("Do you want to help society", 6);
        retract(q);
        insert(question6);
        System.out.println(question6.questionText);
end

//Q4-YES
rule "Q7"
    when
        q: Question(index==4, answer==Answer.YES);
    then
        Question question7 = new Question("Interested in sciences", 7);
        retract(q);
        insert(question7);

        System.out.println(question7.questionText);
end

//Q4-NO
rule "Q8"
    when
        q: Question(index==4, answer==Answer.NO);
    then
        Question question8 = new Question("Can you get a job", 8);
        retract(q);
        insert(question8);
        System.out.println(question8.questionText);
end

//Q5-YES
rule "Q5-sol"
    when
        q: Question(index==5, answer==Answer.YES);
    then
        Solution solution = new Solution("Continue as long as you can");
        retract(q);
        insert(solution);
        System.out.println(solution.solutionText);
end

function Question getAnswer(JFrame frame, Question question, boolean containsMaybe, KieRuntime krt) {

        class ButtonListener implements ItemListener {
                    private Question question;
                    private Answer answer;
                    public ButtonListener(Question question, Answer answer) {
                            this.question = question;
                            this.answer = answer;
                    }

                    @Override
                    public void itemStateChanged(ItemEvent event) {
                            if (event.getStateChange() == ItemEvent.SELECTED) {
                                question.setAnswer(answer);
                            }
                    }
                }

        final JPanel panel = new JPanel(new GridLayout (0,1));
        panel.add(new JLabel(question.getQuestionText()));
        ArrayList<JRadioButton> buttons = new ArrayList<>();

        JRadioButton yesButton = new JRadioButton(Answer.YES.toString());
        yesButton.addItemListener(new ButtonListener(question, Answer.YES));

        JRadioButton noButton = new JRadioButton(Answer.NO.toString());
        noButton.addItemListener(new ButtonListener(question, Answer.NO));

        JRadioButton maybeButton = new JRadioButton(Answer.MAYBE.toString());
        maybeButton.addItemListener(new ButtonListener(question, Answer.MAYBE));

        if(containsMaybe) {
            buttons.addAll(Arrays.asList(yesButton, noButton, maybeButton));
        } else {
            buttons.addAll(Arrays.asList(yesButton, noButton));
        }

        ButtonGroup group = new ButtonGroup();
        for (int i=0;i<buttons.size();i++) {
            group.add(buttons.get(i));
            panel.add(buttons.get(i));
        }

        Object[] options = {"Proceed"};
        		if( JOptionPane.showConfirmDialog(frame, panel, "Question", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE)<0){
        		}

        return question;
}